#ifdef BIP39_TEST

#include "Utils/StrToHex.h"
#include "Collections.h"
#include "Mnemonic.h"
#include "String.h"

#include <iostream>

using namespace Agape;
using namespace Agape::Encryptors::Utils::BIP39;

int main( int argc, char** argv )
{
    //char key[16] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    //                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

    //char key[16] = { 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,
    //                 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f };

    //unsigned char key[16] = { 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
    //                          0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80 };

    //unsigned char key[16] = { 0x9e, 0x88, 0x5d, 0x95, 0x2a, 0xd3, 0x62, 0xca,
    //                          0xeb, 0x4e, 0xfe, 0x34, 0xa8, 0xe9, 0x1b, 0xd2 };
    
    //unsigned char key[16] = { 0xc0, 0xba, 0x5a, 0x8e, 0x91, 0x41, 0x11, 0x21,
    //                          0x0f, 0x2b, 0xd1, 0x31, 0xf3, 0xd5, 0xe0, 0x8d };

    unsigned char key[16] = { 0x79, 0xc8, 0x75, 0xf1, 0x85, 0xc8, 0xe4, 0x4f,
                              0xc1, 0xbf, 0xac, 0xba, 0x09, 0xd2, 0xed, 0x35 };

    char outkey[16];
    
    Vector< String > words;
    Mnemonic::encode( (char*)key, words );

    Vector< String >::const_iterator it( words.begin() );
    for( ; it != words.end(); ++it )
    {
        std::cout << *it << " ";
    }
    std::cout << std::endl;

    if( Mnemonic::decode( words, outkey ) )
    {
        std::cout << "Decode OK" << std::endl;
    }
    else
    {
        std::cout << "Decode ERROR" << std::endl;
    }
    std::cout << strToHex( String( outkey, 16 ) ) << std::endl;
}

#endif // BIP39_TEST
